// client/src/features/book/useUpdateBook.ts

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import { updateBook } from './api.book';
import type { UpdateBookInput, Book } from './types';
import { paths } from '@/shared/config/paths';

/**
 * Custom hook ƒë·ªÉ x·ª≠ l√Ω logic c·∫≠p nh·∫≠t m·ªôt cu·ªën s√°ch.
 * @returns {object} Tr·∫£ v·ªÅ mutation object t·ª´ React Query.
 */
export const useUpdateBook = () => {
  const queryClient = useQueryClient();
  const navigate = useNavigate();

  return useMutation({
    mutationFn: (variables: { bookId: string; bookData: UpdateBookInput }) =>
      updateBook(variables),
    
    /**
     * @param {Book} updatedBook - D·ªØ li·ªáu s√°ch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫£ v·ªÅ t·ª´ API.
     */
    onSuccess: (updatedBook: Book) => {
      console.log('S√°ch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');

      // V√¥ hi·ªáu h√≥a cache c·ªßa danh s√°ch s√°ch n√≥i chung.
      queryClient.invalidateQueries({ queryKey: ['books'] });

      // üí° Pro-tip: V√¥ hi·ªáu h√≥a cache c·ªßa CH√çNH CU·ªêN S√ÅCH v·ª´a ƒë∆∞·ª£c s·ª≠a.
      // ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o n·∫øu ng∆∞·ªùi d√πng quay l·∫°i trang chi ti·∫øt s√°ch,
      // h·ªç s·∫Ω th·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t ngay l·∫≠p t·ª©c.
      queryClient.invalidateQueries({ queryKey: ['book', updatedBook._id] });
      queryClient.invalidateQueries({ queryKey: ['book', updatedBook.slug] });

      navigate(paths.admin.manageBooks);
    },
    
    onError: (error: Error) => {
      console.error('L·ªói khi c·∫≠p nh·∫≠t s√°ch:', error);
    },
  });
};