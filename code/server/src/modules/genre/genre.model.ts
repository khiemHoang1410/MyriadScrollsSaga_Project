// server/src/modules/genre/genre.model.ts -- PHIÊN BẢN CHUẨN CHỈNH CUỐI CÙNG
import mongoose, { Document, Schema, model } from 'mongoose';
import { logger } from '@/config'; // Để ghi log debug và error
import { generateSlug } from '@/utils'; // Import từ barrel file của utils

export interface IGenre extends Document {
  name: string;
  slug: string; // Sẽ được hook tạo và đảm bảo có giá trị
  description?: string | null;
  isActive: boolean; // Trường này sẽ có index
  // createdAt, updatedAt được Mongoose tự động thêm qua timestamps: true
}

const GenreSchema = new Schema<IGenre>(
  {
    name: {
      type: String,
      required: [true, 'Genre name is required.'],
      unique: true,
      trim: true,
      maxlength: [100, 'Genre name cannot exceed 100 characters.'],
    },
    slug: { // QUAN TRỌNG: KHÔNG CÓ "required: true" ở đây
      type: String,
      unique: true, // Giữ unique nếu bro muốn slug không trùng
      trim: true,
      lowercase: true,
      // Note: Slug is effectively required and auto-generated by the pre('save') hook.
      // The hook will throw an error if a slug cannot be generated.
    },
    description: {
      type: String,
      trim: true,
      maxlength: [500, 'Genre description cannot exceed 500 characters.'],
      default: null,
    },
    isActive: {
      type: Boolean,
      default: true,
    },
  },
  {
    timestamps: true,
    toJSON: { virtuals: true, getters: true },
    toObject: { virtuals: true, getters: true },
  }
);

// --- Indexes ---
GenreSchema.index({ isActive: 1 });

// --- Pre-save Hook "chuẩn" cho Genre (tương tự TagModel) ---
GenreSchema.pre<IGenre>('save', function(next) {
  // Đảm bảo LOG_LEVEL trong logger.ts là 'debug' để thấy log này
  logger.debug(`[GenreModel Pre-Save Hook] Triggered. isNew: ${this.isNew}, isNameModified: ${this.isModified('name')}`);

  if (this.isModified('name') || this.isNew) {
    if (typeof this.name === 'string' && this.name.trim() !== '') {
      const generatedSlug = generateSlug(this.name);
      if (generatedSlug) {
        this.slug = generatedSlug;
        logger.debug(`[GenreModel Pre-Save Hook] Slug generated and assigned: '${this.slug}' for name: '${this.name}'`);
        return next();
      } else {
        const errMsg = `Critical: Slug could not be generated from genre name "${this.name}" because the name likely results in an empty slug. Zod validation should have caught this.`;
        logger.error(`[GenreModel Pre-Save Hook] ${errMsg}`);
        return next(new Error(errMsg));
      }
    } else {
      const errMsg = 'Critical: Genre name is invalid (not a string or empty) for slug generation. Zod validation should have caught this.';
      logger.error(`[GenreModel Pre-Save Hook] ${errMsg}`);
      return next(new Error(errMsg));
    }
  }

  if (!this.slug && this.isNew) {
      const errMsg = `Critical Fallback: Slug is still missing for NEW genre with name "${this.name}" after attempting generation. This indicates a flaw in previous checks or invalid initial name.`;
      logger.error(`[GenreModel Pre-Save Hook] ${errMsg}`);
      return next(new Error(errMsg));
  }

  return next();
});

const GenreModel = model<IGenre>('Genre', GenreSchema);

export default GenreModel;